% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SRS.R
\docType{class}
\name{PocockSimonRandomizer-class}
\alias{PocockSimonRandomizer-class}
\alias{show,PocockSimonRandomizer-method}
\alias{tr.assignments<-}
\alias{tr.assignments<-,PocockSimonRandomizer-method}
\alias{tr.assignments}
\alias{tr.assignments,PocockSimonRandomizer-method}
\alias{stateTable}
\alias{stateTable,PocockSimonRandomizer-method}
\alias{computeImbalances}
\alias{computeImbalances,PocockSimonRandomizer,character-method}
\alias{computeOverallImbalance}
\alias{computeOverallImbalance,PocockSimonRandomizer,matrix-method}
\alias{randomizeSubject<-}
\alias{randomizeSubject<-,PocockSimonRandomizer,list-method}
\alias{lastRandomization}
\alias{lastRandomization,PocockSimonRandomizer-method}
\title{A Randomizer using the minimization method of Pocock and Simon}
\usage{
\S4method{show}{PocockSimonRandomizer}(object)

tr.assignments(x) <- value

\S4method{tr.assignments}{PocockSimonRandomizer}(x) <- value

tr.assignments(x)

\S4method{tr.assignments}{PocockSimonRandomizer}(x)

stateTable(x)

\S4method{stateTable}{PocockSimonRandomizer}(x)

computeImbalances(object, factor.values)

\S4method{computeImbalances}{PocockSimonRandomizer,character}(object,
  factor.values)

computeOverallImbalance(object, imbalances)

\S4method{computeOverallImbalance}{PocockSimonRandomizer,matrix}(object,
  imbalances)

randomizeSubject(object) <- value

\S4method{randomizeSubject}{PocockSimonRandomizer,list}(object) <- value

lastRandomization(object)

\S4method{lastRandomization}{PocockSimonRandomizer}(object)
}
\arguments{
\item{object}{a PocockSimonRandomizer object}

\item{x}{the randomizer}

\item{value}{a named list of two items: \code{subject.id}, a character string, and \code{factor values} a vector of factor values}

\item{factor.values}{the factor values}

\item{imbalances}{the imbalances for each treatment}

\item{assignments}{a conformable data frame of treatment assignments so far,
with appropriately named variables}
}
\value{
a matrix of imbalances

the imbalance

a one-row data frame of the last treatment assignment
}
\description{
A randomizer implementing the minimization method of Pocock
and Simon (1975). The definition here closely follows the description in
the paper. Objects can be created by calls of the form
\code{new("PocockSimonRandomizer", expt, seed, tr.ratios, d.func, g.func, p.func)}.
Arguments include a ClinicalExperiment object,
a random number seed, the ratio of treatment counts, a function
to use for computing imbalance for each treatment, a function to
compute the overall imbalance, and a function that provides the
probability allocation to address the imbalance.

Compute imbalances for each treatment assignment given a set of factor values

Compute the overall imbalance given individual imbalances

Randomize a subject given a subject id and the set of factor values

Return the last randomization performed
}
\section{Slots}{

\describe{
\item{\code{expt}}{a ClinicalExperiment object defining the experiment context}

\item{\code{seed}}{A seed for the random number generator for reproducibility}

\item{\code{stateTable}}{A matrix of counts indicating the marginal distribution of each factor level per treatment}

\item{\code{tr.assignments}}{a data frame of treatment assignments so far}

\item{\code{tr.ratios}}{the treatment arm ratio, for example 2:1 in a two treatment experiment}

\item{\code{d.func}}{A function that computes the imbalance for each treatment}

\item{\code{g.func}}{A function that computes the overall imbalance to be minimized}

\item{\code{p.func}}{A function that computes the probability vector of treatment assignments}
}}

\examples{
showClass("PocockSimonRandomizer")
expt <- ClinicalExperiment(number.of.factors = 2,
             number.of.factor.levels = c(2, 2))
randomizer <- new("PocockSimonRandomizer", expt, 1281L)
randomizeSubject(randomizer) <- list(subject.id = "Subject 1",
                                     factor.values = c("F1-1", "F2-2"))
randomizeSubject(randomizer) <- list(subject.id = "Subject 2",
                                     factor.values = c("F1-2", "F2-1"))
print(randomizer)
}
